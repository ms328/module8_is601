name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # -------------------- TEST JOB --------------------
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/cache@v3
        with:
          path: |
            venv
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          # Ensure system libraries required by Playwright are present on the runner.
          # On `ubuntu-latest` this will install the most common packages browsers need.
          sudo apt-get update -y
          sudo apt-get install -y \
            libnss3 libnspr4 libasound2 libatk1.0-0 libcups2 libxss1 libxrandr2 \
            libx11-xcb1 libgtk-3-0 libgbm1 libpangocairo-1.0-0 libxcomposite1 \
            libxcursor1 libxdamage1 libxfixes3 || true

          # Playwright helper to install any additional OS deps (no-op if already satisfied)
          sudo playwright install-deps || true

          # Install browsers used by Playwright
          playwright install

      - name: Run tests
        run: |
          source venv/bin/activate
          pytest tests/unit/ --cov=src --junitxml=test-results/junit.xml
          pytest tests/integration/
          pytest tests/e2e/

  # -------------------- SECURITY SCAN --------------------
  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: docker build -t app:test .

      - name: Show built images
        run: docker images --format 'table {{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.Size}}'
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: 'app:test'
          format: 'table'
          ignorefile: .trivyignore
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # -------------------- DEPLOY JOB --------------------
  deploy:
    needs: security
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            msaju20/601_module8:latest
            msaju20/601_module8:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=msaju20/601_module8:cache
          cache-to: type=inline,mode=max
